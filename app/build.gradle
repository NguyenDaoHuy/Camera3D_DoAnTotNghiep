plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.ar.sceneform.plugin'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.cuongpq.basemvvm"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/INDEX.LIST'
        exclude("META-INF/*.kotlin_module")
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dataBinding{
        enabled=true
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.google.mlkit:object-detection-common:17.1.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - RxJava2 support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - RxJava3 support for Room
    implementation "androidx.room:room-rxjava3:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
    // optional - Paging 3 Integration
    implementation "androidx.room:room-paging:2.5.0-alpha01"

    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    // ViewModel utilities for Compose
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")

    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")
    //noinspection LifecycleAnnotationProcessorWithJava8
    kapt("androidx.lifecycle:lifecycle-compiler:$lifecycle_version")
    //glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    //recyclerview
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"


    implementation "com.google.code.gson:gson:$gson_version"
    implementation("com.squareup.okhttp3:okhttp:$okhttp_version")
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation("com.github.ihsanbal:LoggingInterceptor:$logging_interceptor_version") {
        exclude group: 'org.json', module: 'json'
    }

    // dependency injection
    implementation "com.google.dagger:dagger:$rootProject.dagger2Version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger2Version"
    kapt "com.google.dagger:dagger-compiler:$dagger2Version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger2Version"
    kapt "com.google.dagger:dagger-android-processor:$dagger2Version"
    implementation "com.google.dagger:dagger-android-support:$dagger2Version"

    implementation "io.reactivex.rxjava3:rxjava:$rx_version"

    implementation("com.android.support:multidex:$multidex_version")
    kapt 'com.android.databinding:compiler:3.1.4'
    //Camera X
    // The following line is optional, as the core library is included indirectly by camera-camera2
    implementation("androidx.camera:camera-core:${camerax_version}")
    implementation("androidx.camera:camera-camera2:${camerax_version}")
    // If you want to additionally use the CameraX Lifecycle library
    implementation("androidx.camera:camera-lifecycle:${camerax_version}")
    // If you want to additionally use the CameraX VideoCapture library
    implementation("androidx.camera:camera-video:${camerax_version}")
    // If you want to additionally use the CameraX View class
    implementation("androidx.camera:camera-view:${camerax_version}")
    // If you want to additionally add CameraX ML Kit Vision Integration
    implementation("androidx.camera:camera-mlkit-vision:${camerax_version}")
    // If you want to additionally use the CameraX Extensions library
    implementation("androidx.camera:camera-extensions:${camerax_version}")

    implementation("androidx.cardview:cardview:1.0.0")

    //ML Kit
    implementation 'com.google.mlkit:image-labeling:17.0.6'
    implementation 'com.google.mlkit:image-labeling-custom:17.0.0'
    implementation 'com.google.mlkit:object-detection:16.2.8'
    implementation 'com.google.mlkit:face-detection:16.1.3'
    implementation 'com.google.mlkit:object-detection-custom:16.3.3'

    //AR Core
    implementation 'com.google.ar:core:1.25.0'
    implementation 'de.javagl:obj:0.2.1'

    // Google Cloud Vision APIs
    implementation platform('com.google.cloud:libraries-bom:19.2.1')
    implementation 'com.google.cloud:google-cloud-vision:1.102.0'
    implementation 'io.grpc:grpc-okhttp:1.36.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.4.3'

    // Provides ARCore Session and related resources.
    implementation 'com.google.ar:core:1.33.0'
    // Provides ArFragment, and other UX resources.
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.17.1'
    // Alternatively, use ArSceneView without the UX dependency.
    implementation 'com.google.ar.sceneform:core:1.17.1'

    implementation 'com.airbnb.android:lottie:6.0.0'

    implementation 'com.github.yalantis:ucrop:2.2.2'
    implementation 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.3.0'
    implementation 'me.grantland:autofittextview:0.2.0'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    implementation 'ke.tang:ruler:1.0.5'
    implementation 'com.jakewharton.rxbinding4:rxbinding:4.0.0'

    implementation 'com.commit451:NativeStackBlur:1.0.1'

    //Sdp
    implementation 'com.intuit.sdp:sdp-android:1.1.0'

    //Rate
    implementation 'com.github.dktlib:smart-app-rate:1.4.1'

}

sceneform.asset('sampledata/model/table.obj',
        'default',
        'sampledata/model/table.sfa',
        'src/main/res/raw/table')

sceneform.asset('sampledata/model/chair.obj',
        'default',
        'sampledata/model/chair.sfa',
        'src/main/res/raw/chair')

sceneform.asset('sampledata/model/lamp.obj',
        'default',
        'sampledata/model/lamp.sfa',
        'src/main/res/raw/lamp')

sceneform.asset('sampledata/model/model.obj',
        'default',
        'sampledata/model/model.sfa',
        'src/main/res/raw/model')

sceneform.asset('sampledata/model/tv.obj',
        'default',
        'sampledata/model/tv.sfa',
        'src/main/res/raw/tv')

sceneform.asset('sampledata/model/Piano.obj',
        'default',
        'sampledata/model/Piano.sfa',
        'src/main/res/raw/piano')

sceneform.asset('sampledata/model/BOSCH WLG.obj',
        'default',
        'sampledata/model/BOSCH WLG.sfa',
        'src/main/res/raw/maygiat')

sceneform.asset('sampledata/model/office_chair.obj',
        'default',
        'sampledata/model/office_chair.sfa',
        'src/main/res/raw/officechair')

sceneform.asset('sampledata/model/BED.obj',
        'default',
        'sampledata/model/BED.sfa',
        'src/main/res/raw/bed')

sceneform.asset('sampledata/model/monitor.obj',
        'default',
        'sampledata/model/monitor.sfa',
        'src/main/res/raw/monitor')

sceneform.asset('sampledata/model/IronMan.obj',
        'default',
        'sampledata/model/IronMan.sfa',
        'src/main/res/raw/ironman')

sceneform.asset('sampledata/model/sofa.obj',
        'default',
        'sampledata/model/sofa.sfa',
        'src/main/res/raw/sofa')

sceneform.asset('sampledata/model/Free model Drawer(Final) .obj',
        'default',
        'sampledata/model/Free model Drawer(Final) .sfa',
        'src/main/res/raw/drawbed')

sceneform.asset('sampledata/model/mesa_pc.obj',
        'default',
        'sampledata/model/mesa_pc.sfa',
        'src/main/res/raw/mesapc')

sceneform.asset('sampledata/model/mac laptop.obj',
        'default',
        'sampledata/model/mac laptop.sfa',
        'src/main/res/raw/macbook')